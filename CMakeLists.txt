cmake_minimum_required(VERSION 3.24.0)
project(
	sparse_matrix_math
	VERSION 0.2.0
	DESCRIPTION "Library for sparse matrices" 
)
include(GNUInstallDirs)
include(CMakePackageConfigHelpers)
include(FetchContent)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

add_library(${PROJECT_NAME} INTERFACE ./include/sparse_matrix_math.h)

option(SMM_WITH_MULTITHREADING "Should the computations be multithreaded." ON)
option(SMM_WITH_TESTS "Should add unit test solution to the project" OFF)

# Path to where <package>-confng.cmake files generated by conan cmake_find_package are located
if(NOT DEFINED CMAKE_PREFIX_PATH)
	set(CMAKE_PREFIX_PATH ${CMAKE_BINARY_DIR})
endif()

target_compile_features(${PROJECT_NAME} INTERFACE cxx_std_17)

target_include_directories(${PROJECT_NAME}
	INTERFACE $<BUILD_INTERFACE:${${PROJECT_NAME}_SOURCE_DIR}/include>
	          $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)

install(TARGETS ${PROJECT_NAME}
	EXPORT ${PROJECT_NAME}_Targets
	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

write_basic_package_version_file(
	"${PROJECT_NAME}ConfigVersion.cmake"
	VERSION ${PROJECT_VERSION}
	COMPATIBILITY SameMinorVersion)

if(UNIX)
	set(
		CONFIG_INSTALL_DIR ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/cmake
		CACHE STRING "Path where config files used by find_package will be installed, gets appended to CMAKE_INSTALL_PREFIX")
else()
	set(
		CONFIG_INSTALL_DIR ${PROJECT_NAME}/cmake
		CACHE STRING "Path where config files used by find_package will be installed, gets appended to CMAKE_INSTALL_PREFIX")
endif()

configure_package_config_file(
	"${PROJECT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.cmake.in"
	"${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
	INSTALL_DESTINATION
	${CONFIG_INSTALL_DIR})

install(EXPORT ${PROJECT_NAME}_Targets
        FILE ${PROJECT_NAME}Targets.cmake
        NAMESPACE ${PROJECT_NAME}::
        DESTINATION ${CONFIG_INSTALL_DIR})

install(FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
              "${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
        DESTINATION ${CONFIG_INSTALL_DIR})

install(FILES ${PROJECT_SOURCE_DIR}/include/sparse_matrix_math.h DESTINATION include/sparse_matrix_math)


# Unit tests setup
if(${SMM_WITH_TESTS})
	# Most projects don't need to call find_package and check <name>_FOUND
	# variable when working with FetchContent, because fetch content has
	# FIND_PACKAGE_ARGS which if passed will first try to execute find_package
	# with those arguments and then fallback on FetchContent. However for this
	# project we need to include a file doctest.cmake. If find_package finds
	# the package we can do it with include(doctest) because it is installed
	# into <package>/lib/cmake and cmake knows where to search for it. If
	# find_package fails and FetchContent does a fallback the file would be
	# in ${doctest_SOURCE_DIR}/scripts/cmake/doctest.cmake. It seems like there
	# is no way to tell if FetchContent_Declare with FIND_PACKAGE_ARGS did
	# find_package successfully or it had to fallback, because FetchContent_Declare
	# does not set <package>_FOUND even if the package was found.
	set(doctest_version 2.4.8)
	find_package(doctest ${doctest_version} QUIET)
	set(doctest_cmake_path "doctest")
	if(NOT ${doctest_FOUND})
		message(STATUS "Doctest was not found. Proceeding to download it.")
		FetchContent_Declare(
			doctest
			GIT_REPOSITORY https://github.com/doctest/doctest.git
			GIT_TAG "v${doctest_version}"
		)
		set(DOCTEST_NO_INSTALL ON CACHE BOOL "")
		set(DOCTEST_WITH_MAIN_IN_STATIC_LIB OFF CACHE BOOL "")
		FetchContent_MakeAvailable(doctest)
		set(doctest_cmake_path ${doctest_SOURCE_DIR}/scripts/cmake/doctest.cmake)
	endif()
	include(${doctest_cmake_path})
	enable_testing()

	add_subdirectory("test" "test")
endif()

# Multithreading setup
if(${SMM_WITH_MULTITHREADING})
	set(tbb_version "2021.5.0")
	FetchContent_Declare(
		tbb
		GIT_REPOSITORY https://github.com/oneapi-src/oneTBB.git
		GIT_TAG "v${tbb_version}"
		FIND_PACKAGE_ARGS
			NAMES TBB
			VERSION ${tbb_version}
	)
	set(TBB_TEST OFF CACHE BOOL "")
	FetchContent_MakeAvailable(tbb)
	target_link_libraries(${PROJECT_NAME} INTERFACE TBB::tbb)
	target_compile_definitions(${PROJECT_NAME} INTERFACE -DSMM_MULTITHREADING)
endif()